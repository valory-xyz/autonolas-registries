'solc --version' running
'solc ./ServiceStakingNativeToken-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/autonolas-registries/audits/internal4/analysis/contracts' running
'solc --version' running
'solc ./GnosisSafeSameAddressMultisig-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/autonolas-registries/audits/internal4/analysis/contracts' running
'solc --version' running
'solc ./ServiceStakingToken-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/autonolas-registries/audits/internal4/analysis/contracts' running
'solc --version' running
'solc ./ServiceStakingBase-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/autonolas-registries/audits/internal4/analysis/contracts' running
INFO:Printers:
######################
####### ERC721 #######
######################

## Constructor Call Sequence
	- ERC721

## Constructor Definitions

### ERC721

     constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
    }

#########################################
####### ServiceStakingNativeToken #######
#########################################

## Constructor Call Sequence
	- ServiceStakingBase
	- ServiceStakingNativeToken

## Constructor Definitions

### ServiceStakingBase

     constructor(StakingParams memory _stakingParams, address _serviceRegistry, bytes32 _proxyHash) {
        // Initial checks
        if (_stakingParams.maxNumServices == 0 || _stakingParams.rewardsPerSecond == 0 ||
            _stakingParams.livenessPeriod == 0 || _stakingParams.livenessRatio == 0 ||
            _stakingParams.numAgentInstances == 0) {
            revert ZeroValue();
        }
        if (_stakingParams.minStakingDeposit < 2) {
            revert LowerThan(_stakingParams.minStakingDeposit, 2);
        }
        if (_serviceRegistry == address(0)) {
            revert ZeroAddress();
        }

        // Assign all the required parameters
        maxNumServices = _stakingParams.maxNumServices;
        rewardsPerSecond = _stakingParams.rewardsPerSecond;
        minStakingDeposit = _stakingParams.minStakingDeposit;
        livenessPeriod = _stakingParams.livenessPeriod;
        livenessRatio = _stakingParams.livenessRatio;
        numAgentInstances = _stakingParams.numAgentInstances;
        serviceRegistry = _serviceRegistry;

        // Assign optional parameters
        threshold = _stakingParams.threshold;
        configHash = _stakingParams.configHash;

        // Assign agent Ids, if applicable
        uint256 agentId;
        for (uint256 i = 0; i < _stakingParams.agentIds.length; ++i) {
            // Agent Ids must be unique and in ascending order
            if (_stakingParams.agentIds[i] <= agentId) {
                revert WrongAgentId(_stakingParams.agentIds[i]);
            }
            agentId = _stakingParams.agentIds[i];
            agentIds.push(agentId);
        }

        // Check for the multisig proxy bytecode hash value
        if (_proxyHash == bytes32(0)) {
            revert ZeroValue();
        }

        // Record provided multisig proxy bytecode hash
        proxyHash = _proxyHash;

        // Set the checkpoint timestamp to be the deployment one
        tsCheckpoint = block.timestamp;
    }

### ServiceStakingNativeToken

     constructor(StakingParams memory _stakingParams, address _serviceRegistry, bytes32 _proxyHash)
        ServiceStakingBase(_stakingParams, _serviceRegistry, _proxyHash)
    {}

INFO:Printers:
#############################################
####### GnosisSafeSameAddressMultisig #######
#############################################

## Constructor Call Sequence
	- GnosisSafeSameAddressMultisig

## Constructor Definitions

### GnosisSafeSameAddressMultisig

     constructor(bytes32 _proxyHash) {
        if (_proxyHash == bytes32(0)) {
            revert ZeroValue();
        }

        // Record provided multisig proxy bytecode hash
        proxyHash = _proxyHash;
    }

INFO:Printers:
######################
####### ERC721 #######
######################

## Constructor Call Sequence
	- ERC721

## Constructor Definitions

### ERC721

     constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
    }

###################################
####### ServiceStakingToken #######
###################################

## Constructor Call Sequence
	- ServiceStakingBase
	- ServiceStakingToken

## Constructor Definitions

### ServiceStakingBase

     constructor(StakingParams memory _stakingParams, address _serviceRegistry, bytes32 _proxyHash) {
        // Initial checks
        if (_stakingParams.maxNumServices == 0 || _stakingParams.rewardsPerSecond == 0 ||
            _stakingParams.livenessPeriod == 0 || _stakingParams.livenessRatio == 0 ||
            _stakingParams.numAgentInstances == 0) {
            revert ZeroValue();
        }
        if (_stakingParams.minStakingDeposit < 2) {
            revert LowerThan(_stakingParams.minStakingDeposit, 2);
        }
        if (_serviceRegistry == address(0)) {
            revert ZeroAddress();
        }

        // Assign all the required parameters
        maxNumServices = _stakingParams.maxNumServices;
        rewardsPerSecond = _stakingParams.rewardsPerSecond;
        minStakingDeposit = _stakingParams.minStakingDeposit;
        livenessPeriod = _stakingParams.livenessPeriod;
        livenessRatio = _stakingParams.livenessRatio;
        numAgentInstances = _stakingParams.numAgentInstances;
        serviceRegistry = _serviceRegistry;

        // Assign optional parameters
        threshold = _stakingParams.threshold;
        configHash = _stakingParams.configHash;

        // Assign agent Ids, if applicable
        uint256 agentId;
        for (uint256 i = 0; i < _stakingParams.agentIds.length; ++i) {
            // Agent Ids must be unique and in ascending order
            if (_stakingParams.agentIds[i] <= agentId) {
                revert WrongAgentId(_stakingParams.agentIds[i]);
            }
            agentId = _stakingParams.agentIds[i];
            agentIds.push(agentId);
        }

        // Check for the multisig proxy bytecode hash value
        if (_proxyHash == bytes32(0)) {
            revert ZeroValue();
        }

        // Record provided multisig proxy bytecode hash
        proxyHash = _proxyHash;

        // Set the checkpoint timestamp to be the deployment one
        tsCheckpoint = block.timestamp;
    }

### ServiceStakingToken

     constructor(
        StakingParams memory _stakingParams,
        address _serviceRegistry,
        address _serviceRegistryTokenUtility,
        address _stakingToken,
        bytes32 _proxyHash
    )
        ServiceStakingBase(_stakingParams, _serviceRegistry, _proxyHash)
    {
        // Initial checks
        if (_stakingToken == address(0) || _serviceRegistryTokenUtility == address(0)) {
            revert ZeroAddress();
        }

        stakingToken = _stakingToken;
        serviceRegistryTokenUtility = _serviceRegistryTokenUtility;
    }

INFO:Printers:
######################
####### ERC721 #######
######################

## Constructor Call Sequence
	- ERC721

## Constructor Definitions

### ERC721

     constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
    }

##################################
####### ServiceStakingBase #######
##################################

## Constructor Call Sequence
	- ServiceStakingBase

## Constructor Definitions

### ServiceStakingBase

     constructor(StakingParams memory _stakingParams, address _serviceRegistry, bytes32 _proxyHash) {
        // Initial checks
        if (_stakingParams.maxNumServices == 0 || _stakingParams.rewardsPerSecond == 0 ||
            _stakingParams.livenessPeriod == 0 || _stakingParams.livenessRatio == 0 ||
            _stakingParams.numAgentInstances == 0) {
            revert ZeroValue();
        }
        if (_stakingParams.minStakingDeposit < 2) {
            revert LowerThan(_stakingParams.minStakingDeposit, 2);
        }
        if (_serviceRegistry == address(0)) {
            revert ZeroAddress();
        }

        // Assign all the required parameters
        maxNumServices = _stakingParams.maxNumServices;
        rewardsPerSecond = _stakingParams.rewardsPerSecond;
        minStakingDeposit = _stakingParams.minStakingDeposit;
        livenessPeriod = _stakingParams.livenessPeriod;
        livenessRatio = _stakingParams.livenessRatio;
        numAgentInstances = _stakingParams.numAgentInstances;
        serviceRegistry = _serviceRegistry;

        // Assign optional parameters
        threshold = _stakingParams.threshold;
        configHash = _stakingParams.configHash;

        // Assign agent Ids, if applicable
        uint256 agentId;
        for (uint256 i = 0; i < _stakingParams.agentIds.length; ++i) {
            // Agent Ids must be unique and in ascending order
            if (_stakingParams.agentIds[i] <= agentId) {
                revert WrongAgentId(_stakingParams.agentIds[i]);
            }
            agentId = _stakingParams.agentIds[i];
            agentIds.push(agentId);
        }

        // Check for the multisig proxy bytecode hash value
        if (_proxyHash == bytes32(0)) {
            revert ZeroValue();
        }

        // Record provided multisig proxy bytecode hash
        proxyHash = _proxyHash;

        // Set the checkpoint timestamp to be the deployment one
        tsCheckpoint = block.timestamp;
    }

INFO:Slither:. analyzed (25 contracts)
